"Card 1: 41 48 83 86 17 | 83 86  6 31 17  9 48 53", 4
"Card 2: 13 32 20 16 61 | 61 30 68 82 17 32 24 19", 2
"Card 3:  1 21 53 59 44 | 69 82 63 72 16 21 14  1", 2
"Card 4: 41 92 73 84 69 | 59 84 76 51 58  5 54 83", 1
"Card 5: 87 83 26 28 32 | 88 30 70 12 93 22 82 36", 0
"Card 6: 31 18 13 56 72 | 74 77 10 23 35 67 36 11", 0

1 -> 2, 3, 4, 5
  2 -> 3, 4
    3 -> 4, 5
      4 -> 5
        5 -> 0
      5 -> 0
    4 -> 5
      5 -> 0
  3 -> 4, 5
    4 -> 5
      5 -> 0
    5 -> 0
  4 -> 5
    5 -> 0
  5 -> 0
2 -> 3, 4
  3 -> 4, 5
    4 -> 5
      5 -> 0
    5 -> 0
  4 -> 5
    5 -> 0
3 -> 4, 5
  4 -> 5
    5 -> 0
  5 -> 0
4 -> 5
  5 -> 0
5 -> 0
6 -> 0

6: 0
5: 0
4: 1
3: 3
2: 6 = d[3] + 1 + d[4] + 1
     = 3 + 1 + 1 + 1
     = 6
1: 14 = d[2] + 1 + d[3] + 1 + d[4] + 1
      = 7 + 1 + 3 + 1 + 1 + 1
      = 14

a kind of factorial, but with a disjoint, discrete formula

look_up(n): (int) -> (int, int, ..., int)
scratch_fact(n): (int) -> (int)
    acc = 0
    for i in look_up(n):
        1 + scratch_fact(i)
    return acc
